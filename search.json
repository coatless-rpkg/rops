[{"path":"https://r-pkg.thecoatlessprofessor.com/rops/articles/rops.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Overview of Extended Binary Operators for Data Manipulation","text":"writing functions simply perform data analyses, sometimes may wish just one additional operator equality check speeds process greatly. goal behind package provide operators minimal overhead possible.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/articles/rops.html","id":"package-installation","dir":"Articles","previous_headings":"","what":"Package Installation","title":"Overview of Extended Binary Operators for Data Manipulation","text":"install package, please type:","code":"install.packages(\"rops\")"},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/articles/rops.html","id":"using-the-package","dir":"Articles","previous_headings":"","what":"Using the package","title":"Overview of Extended Binary Operators for Data Manipulation","text":"use package, please load R session typing:","code":"library(\"rops\")"},{"path":[]},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/articles/rops.html","id":"null-coalescing-operator","dir":"Articles","previous_headings":"Coalescing Operators","what":"Null coalescing operator","title":"Overview of Extended Binary Operators for Data Manipulation","text":"","code":"# Null value x = NULL  # Before y = if(is.null(x)){ \"Unset\" } else { x }  # After y = x %??% \"Unset\"  y ## [1] \"Unset\""},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/articles/rops.html","id":"missing-value-na-coalescing-operator","dir":"Articles","previous_headings":"Coalescing Operators","what":"Missing value (NA) coalescing operator","title":"Overview of Extended Binary Operators for Data Manipulation","text":"impute values “missingness” detected, ifna() provides convenient interface.","code":"x = c(1:5, NA, NA, 8, NA, 10) y = 1:10  # Before ifelse(is.na(x), x, y) ##  [1]  1  2  3  4  5 NA NA  8 NA 10 ifelse(is.na(x), x, 3) ##  [1]  3  3  3  3  3 NA NA  3 NA  3 # After ifna(x, y) ##  [1]  1  2  3  4  5  6  7  8  9 10 ifna(x, 3) ##  [1]  1  2  3  4  5  3  3  8  3 10"},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/articles/rops.html","id":"equality-operators","dir":"Articles","previous_headings":"","what":"Equality Operators","title":"Overview of Extended Binary Operators for Data Manipulation","text":"Checking exact equivalence object can done using infix operator instead relying upon identical(). NB cases checking .equal() preferred.","code":"x = y = 1:5 x2 = x + 1  # Before identical(x, y) ## [1] TRUE identical(x2, y) ## [1] FALSE # After x %==% y ## [1] TRUE x2 %==% y ## [1] FALSE # Before !identical(x, y) ## [1] FALSE !identical(x2, y) ## [1] TRUE # After x %!=% y ## [1] FALSE x2 %!=% y ## [1] TRUE"},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/articles/rops.html","id":"whole-numbers","dir":"Articles","previous_headings":"","what":"Whole Numbers","title":"Overview of Extended Binary Operators for Data Manipulation","text":"Previously, using .integer() yield check type vector. , is_whole() function seeks check state numbers individually vector regardless whether numeric integer.","code":"x = c(1, 2, 3, 8.5) y = c(1L, 2L, 3L)  # Before is.integer(x) ## [1] FALSE is.integer(y) ## [1] TRUE # After is_whole(x) ## [1]  TRUE  TRUE  TRUE FALSE is_whole(y) ## [1] TRUE TRUE TRUE"},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/articles/rops.html","id":"safe-sequence-generation","dir":"Articles","previous_headings":"","what":"Safe Sequence Generation","title":"Overview of Extended Binary Operators for Data Manipulation","text":"colon operator (:) perform check whether increment positive negative. leads issues iterating empty vector data.frame using 1:length(obj). avoid , safe sequences %:% performs check make sure sequence positive. , empty integer vector created avoid loop run.","code":"x = NULL  # Before 1:length(x) ## [1] 1 0 # After 1 %:% length(x) ## integer(0)"},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/articles/rops.html","id":"not-in-set","dir":"Articles","previous_headings":"","what":"Not in Set","title":"Overview of Extended Binary Operators for Data Manipulation","text":"set operator negation %% operator checks whether element belongs set.","code":"x = 1:5 set = 3:10  # Before !(x %in% set) ## [1]  TRUE  TRUE FALSE FALSE FALSE # After x %notin% set ## [1]  TRUE  TRUE FALSE FALSE FALSE"},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"James Joseph Balamuta. Author, maintainer.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Balamuta J (2025). rops: Extended Binary Operators Data Manipulation. R package version 0.0.1, https://r-pkg.thecoatlessprofessor.com/rops/.","code":"@Manual{,   title = {rops: Extended Binary Operators for Data Manipulation},   author = {James Joseph Balamuta},   year = {2025},   note = {R package version 0.0.1},   url = {https://r-pkg.thecoatlessprofessor.com/rops/}, }"},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/index.html","id":"r-ops-rops-","dir":"","previous_headings":"","what":"Extended Binary Operators for Data Manipulation","title":"Extended Binary Operators for Data Manipulation","text":"objective behind package provide extension base R supplements present operators manipulations. Demo Operators","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/index.html","id":"supported-functionality","dir":"","previous_headings":"","what":"Supported Functionality","title":"Extended Binary Operators for Data Manipulation","text":"Presently, package support following operators: Operator allow checking substitution value null without /else structure Substitute value NA detected. Vectorized boolean operator assess whether value integer. Create sequences agree parity incrementer. Check see element belong set.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/reference/grapes-notin-grapes.html","id":null,"dir":"Reference","previous_headings":"","what":"Not in — %notin%","title":"Not in — %notin%","text":"Determine element present inside set. particular, function checks see x table.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/reference/grapes-notin-grapes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Not in — %notin%","text":"","code":"x %notin% table"},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/reference/grapes-notin-grapes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Not in — %notin%","text":"x vector NULL: values matched.     Long vectors supported. table vector NULL: values matched .     Long vectors supported.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/reference/grapes-notin-grapes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Not in — %notin%","text":"logical vector TRUE FALSE indicates match found element x.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/reference/grapes-notin-grapes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Not in — %notin%","text":"operator modified version %% function.","code":""},{"path":[]},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/reference/grapes-notin-grapes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Not in — %notin%","text":"","code":"# Returns TRUE as 2 is not found in the vector c(3, 4) 2 %notin% c(3, 4) #> [1] TRUE  # Returns FALSE as 2 is found in the vector c(1, 2) 2 %notin% c(1, 2) #> [1] FALSE  # Vectorized variant that contains FALSE and TRUE c(1, 2) %notin% c(2, 3) #> [1]  TRUE FALSE"},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/reference/ifna.html","id":null,"dir":"Reference","previous_headings":"","what":"Missingness Coalescing Operator — ifna","title":"Missingness Coalescing Operator — ifna","text":"Substitutes values NA detected.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/reference/ifna.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Missingness Coalescing Operator — ifna","text":"","code":"ifna(x, y)"},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/reference/ifna.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Missingness Coalescing Operator — ifna","text":"x possibly containing NA values y object equal length single value used substitution","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/reference/ifna.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Missingness Coalescing Operator — ifna","text":"objective function provide ability substitute values NA. However, important note R unique fact NA data type represent missingness instead relying values pre-coded (e.g. 0, -1111, et cetera). Thus, simplicity function comes disclaimer : \"NA presence absence. forget missing values absence presence\" Hadley Wickham Twitter","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/reference/ifna.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Missingness Coalescing Operator — ifna","text":"https://support.office.com/en-us/article/IFNA-function-6626c961-a569-42fc-a49d-79b4951fd461","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/reference/ifna.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Missingness Coalescing Operator — ifna","text":"","code":"# Data with missing values x <- c(1, NA, NA, 4) # Substitution vector of equal length y <- 1:4  # Replace NA with values in `y` vector ifna(x, y) #> [1] 1 2 3 4  # Replace NA with 5 ifna(x, 5) #> [1] 1 5 5 4"},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/reference/is_whole.html","id":null,"dir":"Reference","previous_headings":"","what":"Check for Whole (Integer) Numbers — is_whole","title":"Check for Whole (Integer) Numbers — is_whole","text":"Checks whether submitted vector values whole (integer) number.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/reference/is_whole.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check for Whole (Integer) Numbers — is_whole","text":"","code":"is_whole(x)"},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/reference/is_whole.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check for Whole (Integer) Numbers — is_whole","text":"x numeric value check see integer.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/reference/is_whole.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check for Whole (Integer) Numbers — is_whole","text":"boolean value indicating whether value integer .","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/reference/is_whole.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check for Whole (Integer) Numbers — is_whole","text":"is_whole() function provides means test whether base::numeric() base::integer() part whole number span (integers). example, 1 2 considered integers whereas 3.6 0.31 considered base::numeric(). behavior function differs base::.integer() performing check storage type] vector instead actual vector contents.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/reference/is_whole.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check for Whole (Integer) Numbers — is_whole","text":"","code":"is_whole(2.3) #> [1] FALSE is_whole(4) #> [1] TRUE is_whole(c(1,2,3)) #> [1] TRUE TRUE TRUE is_whole(c(.4,.5,.6)) #> [1] FALSE FALSE FALSE is_whole(c(7,.8,9)) #> [1]  TRUE FALSE  TRUE"},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/reference/null_coalesce.html","id":null,"dir":"Reference","previous_headings":"","what":"Null Coalescing Operator — %??%","title":"Null Coalescing Operator — %??%","text":"Binary operator simplify null expressions","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/reference/null_coalesce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Null Coalescing Operator — %??%","text":"","code":"x %??% y"},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/reference/null_coalesce.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Null Coalescing Operator — %??%","text":"x value possible NULL y value NULL","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/reference/null_coalesce.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Null Coalescing Operator — %??%","text":"Returns value left hand side (LHS) null, else returns value right hand side (RHS) may NULL.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/reference/null_coalesce.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Null Coalescing Operator — %??%","text":"objective null coalescing operator simplify expression:   allows readable inline.","code":"if(is.null(x)) {   y else {   x }"},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/reference/null_coalesce.html","id":"warning","dir":"Reference","previous_headings":"","what":"Warning","title":"Null Coalescing Operator — %??%","text":"Due way objects created within R, NULL value able stored within atomic vectors. However, NULL value can stored within list. operator triggered NULL within list! , RHS side returned.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/reference/null_coalesce.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Null Coalescing Operator — %??%","text":"https://en.wikipedia.org/wiki/Null_coalescing_operator","code":""},{"path":[]},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/reference/null_coalesce.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Null Coalescing Operator — %??%","text":"","code":"# Null value x <- NULL  # Before y <- if(is.null(x)){ \"Unset\" } else { x }  # After y <- x %??% \"Unset\"  # Concrete examples without variables # Returns 3 as the LHS is _not_ NULL 3 %??% 4 #> [1] 3  # Returns 1 as the LHS is _not_ NULL 1 %??% NULL #> [1] 1  # Returns 2 as the LHS is NULL NULL %??% 2 #> [1] 2  # Coalesce operator NULL %??% NULL %??% 5 #> [1] 5  # Coalesce operator NULL %??% 7 %??% 8 #> [1] 7"},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/reference/obj_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Exact Object Equality Check — %==%","title":"Exact Object Equality Check — %==%","text":"Short-hand declarations checking whether x equivalent y","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/reference/obj_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exact Object Equality Check — %==%","text":"","code":"x %==% y  x %!=% y"},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/reference/obj_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exact Object Equality Check — %==%","text":"x, y two data structures","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/reference/obj_check.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Exact Object Equality Check — %==%","text":"base::identical() function tests exact match meaning variable's storage types match, overall environment variable stored , , importantly, tolerance small numerical differences. doubt, consult base::.equal() perform near equality tests using tolerance operation (e.g number fall within certain range). However, use base::.equal() must enclosed within base::isTRUE() function setup return differences.","code":""},{"path":[]},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/reference/obj_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exact Object Equality Check — %==%","text":"","code":"# Generate some data set.seed(991) x <- y <- rnorm(100)  # Returns TRUE as the objects are exactly the same x %==% y #> [1] TRUE  # Returns FALSE as the objects do not differ. x %!=% y #> [1] FALSE  # Change data x2 <- x+1  # Returns FALSE as the data has changed. x2 %==% y #> [1] FALSE  # Returns TRUE since the data is different. x2 %!=% y #> [1] TRUE"},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/reference/safe_seq.html","id":null,"dir":"Reference","previous_headings":"","what":"Safe Sequence Generation and a Safe Colon Operator — safe_seq","title":"Safe Sequence Generation and a Safe Colon Operator — safe_seq","text":"Generate safe sequences strictly enforcing either positive negative increment","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/reference/safe_seq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Safe Sequence Generation and a Safe Colon Operator — safe_seq","text":"","code":"safe_seq(from = 1L, to = 1L, by = 1L)  from %:% to"},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/reference/safe_seq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Safe Sequence Generation and a Safe Colon Operator — safe_seq","text":", starting (maximal) end values     sequence.  length 1 unless just supplied     unnamed argument. number: increment sequence.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/reference/safe_seq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Safe Sequence Generation and a Safe Colon Operator — safe_seq","text":"integer vector either empty contains sequence numbers.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/reference/safe_seq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Safe Sequence Generation and a Safe Colon Operator — safe_seq","text":"Creating sequences using either base::seq() function : operator notable draw back incorrectly generating positional indices vector empty. example, consider x = NULL. , expression 1:length(x) evaluate 1:0 expands c(1,0). result, Control may inadvertantly trigger bounds error initial run. safe_seq() %:% operator seeks prevent issue enforcing either ascending descending sequence depending condition. %:% operator, note restricted always positive.","code":""},{"path":"https://r-pkg.thecoatlessprofessor.com/rops/reference/safe_seq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Safe Sequence Generation and a Safe Colon Operator — safe_seq","text":"","code":"# Returns a sequence increasing by 1 safe_seq(1, 4) #> [1] 1 2 3 4  # Returns an empty vector safe_seq(4, 1) #> integer(0)  # Similar result 4 %:% 1 #> integer(0)  # Correct result 1 %:% 4 #> [1] 1 2 3 4"}]
