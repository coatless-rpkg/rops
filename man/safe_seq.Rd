% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sequences.R
\name{safe_seq}
\alias{safe_seq}
\alias{\%:\%}
\title{Safe Sequence Generation and a Safe Colon Operator}
\usage{
safe_seq(from = 1L, to = 1L, by = 1L)

from \%:\% to
}
\arguments{
\item{from, to}{the starting and (maximal) end values of the
    sequence.  Of length \code{1} unless just \code{from} is supplied as
    an unnamed argument.}

\item{by}{number: increment of the sequence.}
}
\value{
An integer vector that is either empty or contains a sequence of
numbers.
}
\description{
Generate safe sequences by strictly enforcing either a positive or negative
increment
}
\details{
Creating sequences using either \code{\link[base:seq]{base::seq()}} function or \code{\link{:}}
operator have a notable draw back of incorrectly generating positional
indices when a vector is empty. For example, consider \code{x = NULL}. Then,
the expression \code{1:length(x)} would evaluate to \code{1:0} which expands to \code{c(1,0)}.
As a result, any \code{\link[base]{Control}} may inadvertantly trigger an out of bounds
error on the initial run.

The \code{safe_seq()} and \verb{\%:\%} operator seeks to prevent this issue by enforcing
either an ascending or descending sequence depending on the \code{by} condition.
For the \verb{\%:\%} operator, note that this is restricted to being \emph{always}
positive.
}
\examples{
# Returns a sequence increasing by 1
safe_seq(1, 4)

# Returns an empty vector
safe_seq(4, 1)

# Similar result
4 \%:\% 1

# Correct result
1 \%:\% 4
}
